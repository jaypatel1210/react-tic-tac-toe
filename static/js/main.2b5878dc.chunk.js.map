{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","itemArray","Array","fill","App","useState","isCross","setIsCross","winMsg","setWinMsg","chagneItem","ItemNumber","toast","type","checkAllFilled","count","forEach","res","Container","className","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b5878dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FaTimes, FaRegCircle, FaPen } from 'react-icons/fa';\r\n\r\nconst Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'cross':\r\n            return <FaTimes />;\r\n        case 'circle': \r\n            return <FaRegCircle />;\r\n        default:\r\n            return <FaPen />;\r\n    }\r\n};\r\n\r\nexport default Icon;","import { useState } from 'react';\nimport Icon from './components/Icon';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Col, Row, Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill('empty');\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMsg, setWinMsg] = useState('');\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMsg('');\n    itemArray.fill('empty', 0, 9);\n  }\n\n  const checkWinner = () => {\n     if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMsg(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMsg(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMsg(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMsg(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMsg(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMsg(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMsg(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMsg(`${itemArray[2]} won`);\n    }\n  }\n\n  const chagneItem = ItemNumber => {\n    if (winMsg) {\n      return toast(winMsg, { type: 'success' });\n    }\n    if (itemArray[ItemNumber] === 'empty') {\n      itemArray[ItemNumber] = isCross ? 'cross' : 'circle';\n      setIsCross(!isCross);\n    } else {\n      return toast('Already Filled', { type: 'warning' });\n    }\n    checkWinner();\n    checkAllFilled();\n  }\n  const checkAllFilled = () => {\n    let count = 0;\n    itemArray.forEach(\n      (res) => {\n        if (res !== 'empty') {\n          count++;\n        }\n      }\n    );\n    if (count === 9) {\n      setWinMsg('All Filled Try Again');\n    }\n  }\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\"></ToastContainer>\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3\">\n          { winMsg ? (\n            <div className=\"mx-2\">\n              <h1 className=\"text-success text-center text-uppercase\">\n                { winMsg }\n              </h1>\n              <Button\n              color=\"success\" block \n              onClick={reloadGame}\n              className=\"mb-2\"\n              >\n                Reload the Game\n              </Button>\n            </div>\n          ) : (\n              <h1 className=\"text-warning text-center\">\n                { isCross? 'Cross' : 'Circle' } turns\n              </h1>\n          ) }\n          <div className=\"grid\">\n            { itemArray.map((item, index) => (\n              <Card onClick={ () => chagneItem(index) }>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            )) }\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}